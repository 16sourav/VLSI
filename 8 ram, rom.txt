module memory_16x4(op,ip,rd_wr,clk,address);
   output reg [3:0] op;
   input [3:0]  ip;
   input [3:0] address;
   input  rd_wr,clk;
   reg [3:0]  memory[0:15];

   always @(posedge clk)
     begin
       if (rd_wr)
         op=memory[address];
       else
         begin
           memory[address]=ip;
       end
     end
endmodule


module rom(Address, RD, Output);  
input[3:0] Address; 
input RD;
output reg[3:0] Output; 
reg[3:0] ROM[15:0];
initial begin
ROM[4'b0000]=4'b1111;
ROM[4'b0001]=4'b1110;
ROM[4'b0010]=4'b1101;
ROM[4'b0011]=4'b1100;
ROM[4'b0100]=4'b1011;
ROM[4'b0101]=4'b1010;
ROM[4'b0110]=4'b1001;
ROM[4'b0111]=4'b1000;
ROM[4'b1000]=4'b0111;
ROM[4'b1001]=4'b0110;
ROM[4'b1010]=4'b0101;
ROM[4'b1011]=4'b0100;
ROM[4'b1100]=4'b0011;
ROM[4'b1101]=4'b0010;
ROM[4'b1110]=4'b0001;
ROM[4'b1111]=4'b0000;
end
always@(RD , Address)
begin
if(RD)
begin
Output=ROM[Address];
end
end 
endmodule



module ram_16x4(data, rd, wr, address, op);
input [3:0]data;
input rd, wr;
input [3:0] address;
output reg[3:0] op;
reg [3:0] ram[15:0];
reg [3:0] temp;
always@(address);
begin
if(wr)
begin
ram[address] = data;
temp = ram[address];
end

if(rd)
begin
output = ram[address];
end
end
endmodule


module memory_16x4(op,ip,rd_wr,clk,address);
   output reg [3:0] op;
   input [3:0]  ip;
   input [3:0] address;
   input  rd_wr,clk;
   reg [3:0]  memory[0:15];

   always @(posedge clk)
     begin
       if (rd_wr)
         op=memory[address];
       else
         begin
           memory[address]=ip;
       end
     end
endmodule


module rom(Address, RD, Output);  
input[3:0] Address; 
input RD;
output reg[3:0] Output; 
reg[3:0] ROM[15:0];
initial begin
ROM[4'b0000]=4'b1111;
ROM[4'b0001]=4'b1110;
ROM[4'b0010]=4'b1101;
ROM[4'b0011]=4'b1100;
ROM[4'b0100]=4'b1011;
ROM[4'b0101]=4'b1010;
ROM[4'b0110]=4'b1001;
ROM[4'b0111]=4'b1000;
ROM[4'b1000]=4'b0111;
ROM[4'b1001]=4'b0110;
ROM[4'b1010]=4'b0101;
ROM[4'b1011]=4'b0100;
ROM[4'b1100]=4'b0011;
ROM[4'b1101]=4'b0010;
ROM[4'b1110]=4'b0001;
ROM[4'b1111]=4'b0000;
end
always@(RD , Address)
begin
if(RD)
begin
Output=ROM[Address];
end
end 
endmodule

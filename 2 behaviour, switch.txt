module dff(q,clk,clr,d);
input clk,clr,d;
output q;
reg q;
initial q=1;
always@(posedge clk)
begin if(clr ==1)
q<=0;
else 
q<=d;
end
endmodule


module tff(input clk,input rstn, input t,output reg q);
always@(posedge clk)
begin
if(!rstn)
q<=0;
else
if(t)
q<=~q;
else 
q<=q;
end
endmodule


module d_ff (q, qbar, d, clk, clr);
input d, clr, clk;
output reg q, qbar;
always @ (posedge clk)

begin

if (clr == 1)
begin
q <= 0;
qbar <= 1;
end

else
begin
q <= d;
qbar <= ~d;
end
end
endmodule


module t_ff (q, t, rst, clk);
input t, rst, clk;
output reg q;
always @ (posedge clk)
begin
if (rst == 1)
q<=0;
else if (t)
q<=~q;
else 
q<=q;
end
endmodule


module up_counter(clk,rst,updn,count);
input clk,rst,updn;
output[3:0]count;
reg[3:0]count=0;
always@(posedge(clk)or posedge(rst))
begin
if(rst==1)
count=0;
else
if(updn==1)
count=count+1;
else
count=count-1;
end
endmodule


  module updown(out,rst,clk,mode);
output [3:0] out;
input rst,clk, mode;
reg [3:0] out;
always @(posedge clk)
begin
 case ({rst,mode})
2'b11:out=0;
2'b10:out=0;
2'b01:out=out-1;
2'b00:out=out+1;
endcase 
end 
endmodule




module upordown_counter(Clk, reset, UpOrDown, Count); //high for UP counter and low for Down counter

    
    //input ports and their sizes
    input Clk,reset,UpOrDown;
    //output ports and their size
    output [3 : 0] Count;
    //Internal variables
    reg [3 : 0] Count = 0;  
    
     always @(posedge(Clk))
     begin
        if(reset == 1) 
            Count <= 0;
        else    
            if(UpOrDown == 1)   //Up mode selected
                if(Count == 15)
                    Count <= 0;
                else
                    Count <= Count + 1; //Incremend Counter
            else  //Down mode selected
                if(Count == 0)
                    Count <= 15;
                else
                    Count <= Count - 1; //Decrement counter
     end    
    
endmodule



module updown_counter (clk, rst, updown, count);
input rst, updown, clk;
output [3:0]count;
reg [3:0]count = 0;
always @ (posedge clk)
begin
if (rst == 1)
count = 0;
else if (updown == 1)
count = count + 1;
else
count = count - 1;
end
endmodule


module modn(out,clk,rstn);
parameter N=15;
parameter WIDTH = 4;
input clk;
input rstn;
output [WIDTH-1:0] out;
reg [WIDTH-1:0] out;
always @ (posedge clk) 
begin
if (rstn) begin 
out<=0;
end else begin 
if (out ==N-1)
   out <=0;
else
   out<= out +1;

end 
end 
endmodule


module modN_bh
 # (parameter N = 16,
 parameter WIDTH = 4)
 ( input clk,
 input rstn,
 output reg[WIDTH-1:0] out);

 always @ (posedge clk) begin
 if (!rstn) begin
 out <= 0;
 end else begin
 if (out == N-1)
 out <= 0;
 else
 out <= out + 1;
 end
 end
endmodule 


module modn (out, clk, rstn);
parameter N =15;
parameter width = 4;
input clk;
input rstn;
output reg[width-1:0] out;

always @ (posedge clk)
begin
if (rstn)
begin
out <= 0;
end
else
begin
if (out == N-1)
out <= 0;
else
out <= out + 1;
end
end
endmodule


module modN_bh
 # (parameter N = 16,
 parameter WIDTH = 4)
 ( input clk,
 input rstn,
 output reg[WIDTH-1:0] out);

 always @ (posedge clk) begin
 if (!rstn) begin
 out <= 0;
 end else begin
 if (out == N-1)
 out <= 0;
 else
 out <= out + 1;
 end
 end
endmodule 


module siso_register(shift_out,shift_in,clk);
 input shift_in;
 output shift_out;
 reg shift_out;
 input clk;
 reg [2:0]data;
 always@(posedge clk)
 begin
 data[0]<=shift_in;
 data[1]<=data[0];
 data[2]<=data[1];
 data[0]<=data[2];
 shift_out<=data[2];
 end
 endmodule


module sisomod_bh(shift_out,shift_in,clk);
 input shift_in;
 output shift_out;
 reg shift_out;
 input clk;
 reg [2:0]data;
 always@(posedge clk)
 begin
 data[0]<=shift_in;
 data[1]<=data[0];
 data[2]<=data[1];
 shift_out<=data[2];
 end
endmodule


module cmos_inverter (out,in);
output out;
input in;
supply0 GND;
supply1 PWR;
pmos m1(out,PWR,in);
nmos m2(out,GND,in);
endmodule


module nand_cmos(out,a,b);
 input a,b;
 output out;
 wire w;
 supply1 vdd;
 supply0 gnd;
 pmos m1(out,vdd,a);
 pmos m2(out,vdd,b);
 nmos m3(out,w,a);
 nmos m4(w,gnd,b); 


module mux_21 (y, i0, i1, s);
output y;
input i0, i1, s;
wire sbar;
assign sbar = ~s;
assign y = (sbar&i0)|(s&i1);
endmodule



module mux_41 (y, i0, i1, i2, i3, s0, s1);
output y;
input i0, i1, i2, i3;
input s0, s1;
assign y = (~s1&~s0&i0)|(~s1&s0&i1)|(s1&~s0&i2)|(s1&s0&i3);
endmodule



module mux_81 (out, s, i);
output out;
input [2:0]s;
input [7:0]i;
wire w1, w2;
mux_41 m1(w1, i[0], i[1], i[2], i[3], s[0], s[1]);
mux_41 m2(w2, i[4], i[5], i[6], i[7], s[0], s[1]);
mux_21 m3(out, w1, w2, s[2]);
endmodule



